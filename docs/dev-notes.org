#+TITLE: GeoPub Developer Notes

An overview of the GeoPub architecture.

* Build system

GeoPub is written in [[https://clojurescript.org/][ClojureScript]]. [[http://shadow-cljs.org/][shadow-cljs]] and the [[https://clojure.org/guides/deps_and_cli][Clojure CLI]] are used as build tool.

** JavaScript Integration

shadow-cljs seamlessly handles JavaScript libraries that are installed via NPM. See also [[https://shadow-cljs.github.io/docs/UsersGuide.html#js-deps][the shadow-cljs documentaiton]].

*** Browserify

The [[https://github.com/rdfjs/N3.js][N3.js]] library for parsing Turtle does requires Node.js specific stuff and needs to be transformed before it can run in the browser. For this we use [[http://browserify.org/][browserify]].

The folder [[../resources/n3.js][resources/n3.js]] contains a npm project that will build a bundle of N3.js that runs in the browser. The bundle is written to [[../src/cljs_rdf/n3.js][src/cljs_rdf/n3.js]] and is checked into git.

Shadow-cljs allows the created bundle to be directly loaded into ClojureScript (see [[https://shadow-cljs.github.io/docs/UsersGuide.html#classpath-js][documentation]]).

To recreate the bundle you need to run ~npm run build~ in the [[../resources/n3.js][resources/n3.js]] folder.


** TODO Guix

Make build reproducible with Guix.
* RDF/JS

GeoPub uses the [[http://rdf.js.org/data-model-spec/][RDF/JS Data model specification]] and Javascript libraries for parsing data (currently only Turtle with [[https://github.com/rdfjs/N3.js][N3]]).

See [[https://figwheel.org/docs/npm.html][the figwheel docs]] for more information on how to use npm modules in ClojureScript.

** TODO Use [[https://github.com/rubensworks/rdf-parse.js][RDF Parse]]

A parser for many kinds of RDF serializations (including JSON-LD and RDFa). Binds together other JS libraries with a unified parsing interface.

First attempt to use this library deferred because of problems with handling [[https://nodejs.org/api/stream.html#stream_class_stream_readable][Node.js style streams]] from ClojureScript.

** Native parsers

Preferably we would not have to rely on the npm ecosystem and would use parsers implemented in pure Clojure(Script).

This is utopian. The effort required to implement working and efficient parsers is high and in some cases [[https://json-ld.org/spec/REC/json-ld-api/20140116/][almost impossible]].

I already wasted a lot of time trying to implement a Turtle parser with [[https://github.com/rm-hull/jasentaa][a parser combinator library]].

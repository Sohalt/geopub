#+TITLE: GeoPub Developer Notes

An overview of the GeoPub architecture.

* Build system

GeoPub is written in [[https://clojurescript.org/][ClojureScript]]. [[http://shadow-cljs.org/][shadow-cljs]] and the [[https://clojure.org/guides/deps_and_cli][Clojure CLI]] are used as build tool.

** JavaScript Integration

shadow-cljs seamlessly handles JavaScript libraries that are installed via NPM. See also [[https://shadow-cljs.github.io/docs/UsersGuide.html#js-deps][the shadow-cljs documentaiton]].

*** Browserify

The [[https://github.com/rdfjs/N3.js][N3.js]] library for parsing Turtle does requires Node.js specific stuff and needs to be transformed before it can run in the browser. For this we use [[http://browserify.org/][browserify]].

The folder [[../resources/n3.js][resources/n3.js]] contains a npm project that will build a bundle of N3.js that runs in the browser. The bundle is written to [[../src/cljs_rdf/n3.js][src/cljs_rdf/n3.js]] and is checked into git.

Shadow-cljs allows the created bundle to be directly loaded into ClojureScript (see [[https://shadow-cljs.github.io/docs/UsersGuide.html#classpath-js][documentation]]).

To recreate the bundle you need to run ~npm run build~ in the [[../resources/n3.js][resources/n3.js]] folder.

** Emacs integration

Emacs Cider integration works (for me) when using the ~shadow-cljs~ tool to
start the repl (not with Clojure CLI tools).

*** TODO make work with Clojure CLI tools

This would get rid of the ~shadow-cljs~ npm dependency.

The pre-defined 'shadow repl-type does not start a server. This seems to be
necessary (and documented here:
https://shadow-cljs.github.io/docs/UsersGuide.html#embedded).

This custom repl type starts the server:

#+BEGIN_SRC elisp
(eval . (cider-register-cljs-repl-type 'shadow-watch "(do (require '[shadow.cljs.devtools.server :as server]) (server/start!) (require '[shadow.cljs.devtools.api :as shadow]) (shadow/watch :app) (shadow/nrepl-select :app)) "))
#+END_SRC

** TODO Guix

Make build reproducible with Guix.
* RDF Parsers & Writers

Currently GeoPub uses the [[https://github.com/rdfjs/N3.js][N3.js]] library for parsing [[https://www.w3.org/TR/turtle/][RDF/Turtle]].

** TODO Use [[https://github.com/rubensworks/rdf-parse.js][RDF Parse]]

A parser for many kinds of RDF serializations (including JSON-LD and RDFa). Binds together other JS libraries with a unified parsing interface.

First attempt to use this library deferred because of problems with handling [[https://nodejs.org/api/stream.html#stream_class_stream_readable][Node.js style streams]] from ClojureScript.

Even with a Clojure native parser this is useful to read a bunch of different formats.

** Clojure(Script) native parser/writer

It would be much nicer to have a native Clojure(Script) parser for Turtle. This would allow defining macros to load ontologies at compile time and other niceties.

*** Using [[https://github.com/rm-hull/jasentaa][jasentaa]]

Failed due to this: https://groups.google.com/forum/#!topic/clojure/yLHLUmMZftw

Probably solvable with more lazyness.

*** TODO Using [[https://github.com/Engelberg/instaparse][instaparse]]

instaparse supports EBNF and ABNF but not W3C EBNF.

But it should still be possible to transform grammar definition from W3C EBNF to
standard EBNF/ABNF. See also:

- https://github.com/Engelberg/instaparse/issues/100
- https://bottlecaps.de/rex/

Another (more ambitious) approach is to implement W3C EBNF parser in
instaparser. Could be useful for all the other W3C thingies.
